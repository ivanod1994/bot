import requests
import pandas as pd
import numpy as np
import time
import csv
import os
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import MACD, EMAIndicator, ADXIndicator, CCIIndicator
from ta.volatility import BollingerBands, KeltnerChannel
from datetime import datetime, timedelta, timezone
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = "8246979603:AAGSP7b-YRol151GlZpfxyyS34rW5ncZJo4"
CHAT_ID = "6677680988"
SYMBOLS = ["EURJPY=X", "EURUSD=X", "CHFJPY=X", "USDCAD=X", "CADJPY=X"]
INTERVAL = 60  # —Å–µ–∫
CSV_FILE = "signals.csv"
DELETE_AFTER_MINUTES = 5
PREPARE_SECONDS = 90  # ‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
# =================

# –ü–æ–≤—Ç–æ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
session = requests.Session()
retry = Retry(total=3, backoff_factor=1, status_forcelist=[502, 503, 504, 429])
session.mount('https://', HTTPAdapter(max_retries=retry))

# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

def get_data(symbol):
    url = f"https://query1.finance.yahoo.com/v8/finance/chart/{symbol}?range=5d&interval=1m"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        print(f"‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ {symbol.replace('=X','')}")
        response = session.get(url, headers=headers, timeout=10)
        data = response.json()
        if response.status_code != 200 or data['chart']['result'] is None:
            print(f"[{symbol}] –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return None
        ts = data['chart']['result'][0]['timestamp']
        prices = data['chart']['result'][0]['indicators']['quote'][0]['close']
        df = pd.DataFrame({"timestamp": ts, "close": prices})
        df.dropna(inplace=True)
        return df
    except Exception as e:
        print(f"[{symbol}] –û—à–∏–±–∫–∞: {e}")
        return None

# –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤

def analyze(df):
    close = df['close']
    rsi = RSIIndicator(close).rsi()
    macd = MACD(close)
    bb = BollingerBands(close)
    ema12 = EMAIndicator(close, window=12).ema_indicator()
    ema26 = EMAIndicator(close, window=26).ema_indicator()
    adx = ADXIndicator(high=close, low=close, close=close).adx()
    stochastic = StochasticOscillator(close=close, high=close, low=close).stoch()
    cci = CCIIndicator(close=close, high=close, low=close).cci()

    rsi_v = rsi.iloc[-1]
    macd_val = macd.macd().iloc[-1]
    signal_val = macd.macd_signal().iloc[-1]
    ema12_v = ema12.iloc[-1]
    ema26_v = ema26.iloc[-1]
    adx_v = adx.iloc[-1]
    stoch_v = stochastic.iloc[-1]
    cci_v = cci.iloc[-1]
    price = close.iloc[-1]
    upper = bb.bollinger_hband().iloc[-1]
    lower = bb.bollinger_lband().iloc[-1]

    if adx_v < 15:  # –£–ø—Ä–æ—Å—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä ADX
        return "WAIT", round(rsi_v, 2)

    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è BUY
    if (rsi_v < 45 and macd_val > signal_val and ema12_v > ema26_v and stoch_v < 30):
        return "BUY (Soft) ‚úÖ", round(rsi_v, 2)

    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è SELL
    if (rsi_v > 55 and macd_val < signal_val and ema12_v < ema26_v and stoch_v > 70):
        return "SELL (Soft) ‚úÖ", round(rsi_v, 2)

    return "WAIT", round(rsi_v, 2)

# Telegram

def send_telegram_message(msg):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        requests.post(url, data={"chat_id": CHAT_ID, "text": msg}, timeout=10)
    except:
        print("–û—à–∏–±–∫–∞ Telegram")

# –ó–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–∞

def log_signal(symbol, signal, rsi, entry, exit):
    with open(CSV_FILE, 'a', newline='') as f:
        csv.writer(f).writerow([symbol, signal, rsi, entry, exit])

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

def clean_old_signals():
    if not os.path.exists(CSV_FILE):
        return
    now = datetime.now(timezone.utc) + timedelta(hours=3)
    rows = []
    with open(CSV_FILE, 'r') as f:
        reader = csv.reader(f)
        headers = next(reader)
        for row in reader:
            try:
                entry_time = datetime.strptime(row[3], "%H:%M:%S")
                if now - entry_time <= timedelta(minutes=DELETE_AFTER_MINUTES):
                    rows.append(row)
            except:
                continue
    with open(CSV_FILE, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Symbol", "Signal", "RSI", "Entry Time", "Exit Time"])
        writer.writerows(rows)

# –°–∏–≥–Ω–∞–ª

def send_signal(symbol, signal, rsi):
    now = datetime.now(timezone.utc) + timedelta(hours=3)
    entry = now + timedelta(seconds=PREPARE_SECONDS)
    exit_ = entry + timedelta(minutes=1)
    entry_str = entry.strftime("%H:%M:%S")
    exit_str = exit_.strftime("%H:%M:%S")

    msg = (
        f"üö® –°–ò–ì–ù–ê–õ –ø–æ {symbol.replace('=X','')}\n"
        f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {signal}\n"
        f"üìä RSI: {rsi}\n"
        f"‚è± –í—Ö–æ–¥: {entry_str} (—á–µ—Ä–µ–∑ {PREPARE_SECONDS} —Å–µ–∫)\n"
        f"‚è≥ –í—ã—Ö–æ–¥: {exit_str} (—á–µ—Ä–µ–∑ 1 –º–∏–Ω –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞)"
    )

    print(msg)
    send_telegram_message(msg)
    log_signal(symbol.replace('=X',''), signal, rsi, entry_str, exit_str)

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª

def main():
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, 'w', newline='') as f:
            csv.writer(f).writerow(["Symbol", "Signal", "RSI", "Entry Time", "Exit Time"])

    while True:
        print("üåÄ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞...")
        clean_old_signals()
        for symbol in SYMBOLS:
            df = get_data(symbol)
            if df is not None:
                signal, rsi = analyze(df)
                if signal != "WAIT":
                    send_signal(symbol, signal, rsi)
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...")
        time.sleep(INTERVAL)

if __name__ == '__main__':
    main()
